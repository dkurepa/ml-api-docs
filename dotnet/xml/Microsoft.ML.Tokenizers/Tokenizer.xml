<Type Name="Tokenizer" FullName="Microsoft.ML.Tokenizers.Tokenizer">
  <TypeSignature Language="C#" Value="public class Tokenizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Tokenizer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.Tokenizer" />
  <TypeSignature Language="VB.NET" Value="Public Class Tokenizer" />
  <TypeSignature Language="F#" Value="type Tokenizer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Tokenizer works as a pipeline. It processes some raw text as input and outputs a TokenizerResult object.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tokenizer (Microsoft.ML.Tokenizers.Model model, Microsoft.ML.Tokenizers.PreTokenizer? preTokenizer = default, Microsoft.ML.Tokenizers.Normalizer? normalizer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ML.Tokenizers.Model model, class Microsoft.ML.Tokenizers.PreTokenizer preTokenizer, class Microsoft.ML.Tokenizers.Normalizer normalizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.#ctor(Microsoft.ML.Tokenizers.Model,Microsoft.ML.Tokenizers.PreTokenizer,Microsoft.ML.Tokenizers.Normalizer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (model As Model, Optional preTokenizer As PreTokenizer = Nothing, Optional normalizer As Normalizer = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.Tokenizer : Microsoft.ML.Tokenizers.Model * Microsoft.ML.Tokenizers.PreTokenizer * Microsoft.ML.Tokenizers.Normalizer -&gt; Microsoft.ML.Tokenizers.Tokenizer" Usage="new Microsoft.ML.Tokenizers.Tokenizer (model, preTokenizer, normalizer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.Tokenizers.Model" />
        <Parameter Name="preTokenizer" Type="Microsoft.ML.Tokenizers.PreTokenizer" />
        <Parameter Name="normalizer" Type="Microsoft.ML.Tokenizers.Normalizer" />
      </Parameters>
      <Docs>
        <param name="model">The Model in use by the Tokenizer.</param>
        <param name="preTokenizer">The optional PreTokenizer in use by the Tokenizer. WhiteSpace PreTokenizer will be used if this parameter is null.</param>
        <param name="normalizer">The optional Normalizer in use by the Tokenizer.</param>
        <summary>
            Create a new Tokenizer object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string? Decode (System.Collections.Generic.IEnumerable&lt;int&gt; ids, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; ids, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (ids As IEnumerable(Of Integer), Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="member this.Decode : seq&lt;int&gt; * bool -&gt; string" Usage="tokenizer.Decode (ids, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ids">The list of ids that we want to decode.</param>
        <param name="skipSpecialTokens">Whether the special tokens should be removed from the decoded string.</param>
        <summary>
            Decode the given ids, back to a String.
            </summary>
        <returns>The decoded string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public string? Decode (int id, bool skipSpecialTokens = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Decode(int32 id, bool skipSpecialTokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Decode(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decode (id As Integer, Optional skipSpecialTokens As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="member this.Decode : int * bool -&gt; string" Usage="tokenizer.Decode (id, skipSpecialTokens)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="skipSpecialTokens" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">The id to map to the token.</param>
        <param name="skipSpecialTokens">Indicate if want to skip the special tokens during the decoding.</param>
        <summary>
            Decodes the Id to the mapped token.
            </summary>
        <returns>The decoded string or null if there is no token mapped to the input id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decoder">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerDecoder? Decoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.TokenizerDecoder Decoder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Decoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Decoder As TokenizerDecoder" />
      <MemberSignature Language="F#" Value="member this.Decoder : Microsoft.ML.Tokenizers.TokenizerDecoder with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.Decoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerDecoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Decoder in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.TokenizerResult Encode (string sequence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Tokenizers.TokenizerResult Encode(string sequence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.Encode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (sequence As String) As TokenizerResult" />
      <MemberSignature Language="F#" Value="member this.Encode : string -&gt; Microsoft.ML.Tokenizers.TokenizerResult" Usage="tokenizer.Encode sequence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.TokenizerResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequence" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sequence">The text to tokenize.</param>
        <summary>
            Encodes input text to object has the tokens list, tokens Ids, tokens offset mapping.
            </summary>
        <returns>The tokenization result includes the tokens list, tokens Ids, tokens offset mapping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Model">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Model Model { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Model Model" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Model" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Model As Model" />
      <MemberSignature Language="F#" Value="member this.Model : Microsoft.ML.Tokenizers.Model" Usage="Microsoft.ML.Tokenizers.Tokenizer.Model" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Model</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Model in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalizer">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.Normalizer? Normalizer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.Normalizer Normalizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.Normalizer" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalizer As Normalizer" />
      <MemberSignature Language="F#" Value="member this.Normalizer : Microsoft.ML.Tokenizers.Normalizer with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.Normalizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.Normalizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Normalizer in use by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreTokenizer">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.Tokenizers.PreTokenizer PreTokenizer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" />
      <MemberSignature Language="VB.NET" Value="Public Property PreTokenizer As PreTokenizer" />
      <MemberSignature Language="F#" Value="member this.PreTokenizer : Microsoft.ML.Tokenizers.PreTokenizer with get, set" Usage="Microsoft.ML.Tokenizers.Tokenizer.PreTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Tokenizers.PreTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the PreTokenizer used by the Tokenizer.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrainFromFiles">
      <MemberSignature Language="C#" Value="public void TrainFromFiles (Microsoft.ML.Tokenizers.Trainer? trainer, Microsoft.ML.Tokenizers.ReportProgress? progress, params string[] files);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrainFromFiles(class Microsoft.ML.Tokenizers.Trainer trainer, class Microsoft.ML.Tokenizers.ReportProgress progress, string[] files) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.Tokenizer.TrainFromFiles(Microsoft.ML.Tokenizers.Trainer,Microsoft.ML.Tokenizers.ReportProgress,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrainFromFiles (trainer As Trainer, progress As ReportProgress, ParamArray files As String())" />
      <MemberSignature Language="F#" Value="member this.TrainFromFiles : Microsoft.ML.Tokenizers.Trainer * Microsoft.ML.Tokenizers.ReportProgress * string[] -&gt; unit" Usage="tokenizer.TrainFromFiles (trainer, progress, files)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trainer" Type="Microsoft.ML.Tokenizers.Trainer" />
        <Parameter Name="progress" Type="Microsoft.ML.Tokenizers.ReportProgress" />
        <Parameter Name="files" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trainer">An optional trainer that should be used to train our Model.</param>
        <param name="progress">Optional progress callback to report the training progress.</param>
        <param name="files">A list of the files that we should use for training.</param>
        <summary>
            Train the tokenizer model using input files.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
