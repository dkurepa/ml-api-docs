<Type Name="NormalizedString" FullName="Microsoft.ML.Tokenizers.NormalizedString">
  <TypeSignature Language="C#" Value="public readonly struct NormalizedString" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit NormalizedString extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.NormalizedString" />
  <TypeSignature Language="VB.NET" Value="Public Structure NormalizedString" />
  <TypeSignature Language="F#" Value="type NormalizedString = struct" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Contains the normalized string and the mapping to the original string.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NormalizedString (string original, string normalizedString, int[]? mapping, bool isOneToOneMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string original, string normalizedString, int32[] mapping, bool isOneToOneMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.NormalizedString.#ctor(System.String,System.String,System.Int32[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (original As String, normalizedString As String, mapping As Integer(), isOneToOneMapping As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.NormalizedString : string * string * int[] * bool -&gt; Microsoft.ML.Tokenizers.NormalizedString" Usage="new Microsoft.ML.Tokenizers.NormalizedString (original, normalizedString, mapping, isOneToOneMapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.String" />
        <Parameter Name="normalizedString" Type="System.String" />
        <Parameter Name="mapping" Type="System.Int32[]" />
        <Parameter Name="isOneToOneMapping" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="original">The original string before normalization.</param>
        <param name="normalizedString">The normalized string.</param>
        <param name="mapping">The mapping between the normalized string and the original string.</param>
        <param name="isOneToOneMapping">Indicate whether the mapping is one-to-one.</param>
        <summary>
            Create NormalizedString object containing the normalization of the original string and the mapping
            between the original and the normalized string.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanMapToOriginal">
      <MemberSignature Language="C#" Value="public bool CanMapToOriginal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanMapToOriginal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.NormalizedString.CanMapToOriginal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanMapToOriginal As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanMapToOriginal : bool" Usage="Microsoft.ML.Tokenizers.NormalizedString.CanMapToOriginal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whether can map the normalized string the original string.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneToOneMapping">
      <MemberSignature Language="C#" Value="public bool IsOneToOneMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneToOneMapping" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.NormalizedString.IsOneToOneMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOneToOneMapping As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsOneToOneMapping : bool" Usage="Microsoft.ML.Tokenizers.NormalizedString.IsOneToOneMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whether the normalization between the normalized string and the original string is one-to-one.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalized">
      <MemberSignature Language="C#" Value="public string Normalized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Normalized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.NormalizedString.Normalized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Normalized As String" />
      <MemberSignature Language="F#" Value="member this.Normalized : string" Usage="Microsoft.ML.Tokenizers.NormalizedString.Normalized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the normalized string.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizedToOriginalMapping">
      <MemberSignature Language="C#" Value="public int[]? NormalizedToOriginalMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NormalizedToOriginalMapping" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.NormalizedString.NormalizedToOriginalMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NormalizedToOriginalMapping As Integer()" />
      <MemberSignature Language="F#" Value="member this.NormalizedToOriginalMapping : int[]" Usage="Microsoft.ML.Tokenizers.NormalizedString.NormalizedToOriginalMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the mapping between the normalized string and the original string.
            </summary>
        <value>To be added.</value>
        <remarks>
            The mapping can be null if IsOneToOneMapping is true or if the normalization doesn't support the mapping.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Original">
      <MemberSignature Language="C#" Value="public string Original { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Original" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.NormalizedString.Original" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Original As String" />
      <MemberSignature Language="F#" Value="member this.Original : string" Usage="Microsoft.ML.Tokenizers.NormalizedString.Original" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the original string before the normalization.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
