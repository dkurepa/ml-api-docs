<Type Name="BpeTrainer" FullName="Microsoft.ML.Tokenizers.BpeTrainer">
  <TypeSignature Language="C#" Value="public sealed class BpeTrainer : Microsoft.ML.Tokenizers.Trainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BpeTrainer extends Microsoft.ML.Tokenizers.Trainer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Tokenizers.BpeTrainer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BpeTrainer&#xA;Inherits Trainer" />
  <TypeSignature Language="F#" Value="type BpeTrainer = class&#xA;    inherit Trainer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.ML.Tokenizers.Trainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The Bpe trainer responsible to train the Bpe model.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BpeTrainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BpeTrainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Construct a new BpeTrainer object using the default values.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BpeTrainer (System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Tokenizers.AddedToken&gt;? specialTokens, int minFrequency = 0, int vocabSize = 30000, Microsoft.ML.Tokenizers.ReportProgress? progress = default, int? limitAlphabet = default, System.Collections.Generic.HashSet&lt;char&gt;? initialAlphabet = default, string? continuingSubwordPrefix = default, string? endOfWordSuffix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.ML.Tokenizers.AddedToken&gt; specialTokens, int32 minFrequency, int32 vocabSize, class Microsoft.ML.Tokenizers.ReportProgress progress, valuetype System.Nullable`1&lt;int32&gt; limitAlphabet, class System.Collections.Generic.HashSet`1&lt;char&gt; initialAlphabet, string continuingSubwordPrefix, string endOfWordSuffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BpeTrainer.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ML.Tokenizers.AddedToken},System.Int32,System.Int32,Microsoft.ML.Tokenizers.ReportProgress,System.Nullable{System.Int32},System.Collections.Generic.HashSet{System.Char},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (specialTokens As IEnumerable(Of AddedToken), Optional minFrequency As Integer = 0, Optional vocabSize As Integer = 30000, Optional progress As ReportProgress = Nothing, Optional limitAlphabet As Nullable(Of Integer) = Nothing, Optional initialAlphabet As HashSet(Of Char) = Nothing, Optional continuingSubwordPrefix As String = Nothing, Optional endOfWordSuffix As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.Tokenizers.BpeTrainer : seq&lt;Microsoft.ML.Tokenizers.AddedToken&gt; * int * int * Microsoft.ML.Tokenizers.ReportProgress * Nullable&lt;int&gt; * System.Collections.Generic.HashSet&lt;char&gt; * string * string -&gt; Microsoft.ML.Tokenizers.BpeTrainer" Usage="new Microsoft.ML.Tokenizers.BpeTrainer (specialTokens, minFrequency, vocabSize, progress, limitAlphabet, initialAlphabet, continuingSubwordPrefix, endOfWordSuffix)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="specialTokens" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.ML.Tokenizers.AddedToken&gt;" />
        <Parameter Name="minFrequency" Type="System.Int32" />
        <Parameter Name="vocabSize" Type="System.Int32" />
        <Parameter Name="progress" Type="Microsoft.ML.Tokenizers.ReportProgress" />
        <Parameter Name="limitAlphabet" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="initialAlphabet" Type="System.Collections.Generic.HashSet&lt;System.Char&gt;" />
        <Parameter Name="continuingSubwordPrefix" Type="System.String" />
        <Parameter Name="endOfWordSuffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="specialTokens">The list of special tokens the model should know of.</param>
        <param name="minFrequency">The minimum frequency a pair should have in order to be merged.</param>
        <param name="vocabSize">the size of the final vocabulary, including all tokens and alphabet.</param>
        <param name="progress">Callback for the training progress updates.</param>
        <param name="limitAlphabet">The list of characters to include in the initial alphabet.</param>
        <param name="initialAlphabet">The JSON file path containing the dictionary of string keys and their ids</param>
        <param name="continuingSubwordPrefix">the prefix to be used for every sub-word that is not a beginning-of-word.</param>
        <param name="endOfWordSuffix">the suffix to be used for every sub-word that is a end-of-word.</param>
        <summary>
            Construct a new BpeTrainer object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinuingSubwordPrefix">
      <MemberSignature Language="C#" Value="public string? ContinuingSubwordPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContinuingSubwordPrefix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.ContinuingSubwordPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuingSubwordPrefix As String" />
      <MemberSignature Language="F#" Value="member this.ContinuingSubwordPrefix : string" Usage="Microsoft.ML.Tokenizers.BpeTrainer.ContinuingSubwordPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the prefix to be used for every sub-word that is not a beginning-of-word.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfWordSuffix">
      <MemberSignature Language="C#" Value="public string? EndOfWordSuffix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndOfWordSuffix" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.EndOfWordSuffix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfWordSuffix As String" />
      <MemberSignature Language="F#" Value="member this.EndOfWordSuffix : string" Usage="Microsoft.ML.Tokenizers.BpeTrainer.EndOfWordSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the suffix to be used for every sub-word that is a end-of-word.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Feed">
      <MemberSignature Language="C#" Value="public override void Feed (System.Collections.Generic.IEnumerable&lt;string&gt; sequences, Func&lt;string,System.Collections.Generic.IEnumerable&lt;string&gt;&gt; process);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Feed(class System.Collections.Generic.IEnumerable`1&lt;string&gt; sequences, class System.Func`2&lt;string, class System.Collections.Generic.IEnumerable`1&lt;string&gt;&gt; process) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BpeTrainer.Feed(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Feed (sequences As IEnumerable(Of String), process As Func(Of String, IEnumerable(Of String)))" />
      <MemberSignature Language="F#" Value="override this.Feed : seq&lt;string&gt; * Func&lt;string, seq&lt;string&gt;&gt; -&gt; unit" Usage="bpeTrainer.Feed (sequences, process)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequences" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="process" Type="System.Func&lt;System.String,System.Collections.Generic.IEnumerable&lt;System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="sequences">The list of sequences to feed the trainer.</param>
        <param name="process">Optional process callback for reporting the training progress update.</param>
        <summary>
            Process the input sequences and feed the result to the model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialAlphabet">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.HashSet&lt;char&gt;? InitialAlphabet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.HashSet`1&lt;char&gt; InitialAlphabet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.InitialAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InitialAlphabet As HashSet(Of Char)" />
      <MemberSignature Language="F#" Value="member this.InitialAlphabet : System.Collections.Generic.HashSet&lt;char&gt;" Usage="Microsoft.ML.Tokenizers.BpeTrainer.InitialAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of characters to include in the initial alphabet, even if not seen in the training dataset.
            If the strings contain more than one character, only the first one is kept.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LimitAlphabet">
      <MemberSignature Language="C#" Value="public int? LimitAlphabet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; LimitAlphabet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.LimitAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LimitAlphabet As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.LimitAlphabet : Nullable&lt;int&gt;" Usage="Microsoft.ML.Tokenizers.BpeTrainer.LimitAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the maximum different characters to keep in the alphabet.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinFrequency">
      <MemberSignature Language="C#" Value="public int MinFrequency { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinFrequency" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.MinFrequency" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinFrequency As Integer" />
      <MemberSignature Language="F#" Value="member this.MinFrequency : int" Usage="Microsoft.ML.Tokenizers.BpeTrainer.MinFrequency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the minimum frequency a pair should have in order to be merged.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.AddedToken&gt;? SpecialTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.AddedToken&gt; SpecialTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.SpecialTokens" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialTokens As IReadOnlyList(Of AddedToken)" />
      <MemberSignature Language="F#" Value="member this.SpecialTokens : System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.AddedToken&gt;" Usage="Microsoft.ML.Tokenizers.BpeTrainer.SpecialTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.AddedToken&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of special tokens the model should know of.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Train">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.AddedToken&gt;? Train (Microsoft.ML.Tokenizers.Model model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.ML.Tokenizers.AddedToken&gt; Train(class Microsoft.ML.Tokenizers.Model model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Tokenizers.BpeTrainer.Train(Microsoft.ML.Tokenizers.Model)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Train (model As Model) As IReadOnlyList(Of AddedToken)" />
      <MemberSignature Language="F#" Value="override this.Train : Microsoft.ML.Tokenizers.Model -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.AddedToken&gt;" Usage="bpeTrainer.Train model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.ML.Tokenizers.AddedToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.ML.Tokenizers.Model" />
      </Parameters>
      <Docs>
        <param name="model">The model to train. This has to be BpeModel to work with BpeTrainer.</param>
        <summary>
            Perform the actual training and update the input model with the new vocabularies and merges data.
            </summary>
        <returns>The list of the added tokens.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VocabSize">
      <MemberSignature Language="C#" Value="public int VocabSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VocabSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Tokenizers.BpeTrainer.VocabSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VocabSize As Integer" />
      <MemberSignature Language="F#" Value="member this.VocabSize : int" Usage="Microsoft.ML.Tokenizers.BpeTrainer.VocabSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Tokenizers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the size of the final vocabulary, including all tokens and alphabet.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
