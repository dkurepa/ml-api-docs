<Type Name="FocalLoss" FullName="Microsoft.ML.TorchSharp.Loss.FocalLoss">
  <TypeSignature Language="C#" Value="public class FocalLoss : TorchSharp.torch.nn.Module&lt;TorchSharp.torch.Tensor,TorchSharp.torch.Tensor,TorchSharp.torch.Tensor,TorchSharp.torch.Tensor,TorchSharp.torch.Tensor&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FocalLoss extends TorchSharp.torch/nn/Module`5&lt;class TorchSharp.torch/Tensor, class TorchSharp.torch/Tensor, class TorchSharp.torch/Tensor, class TorchSharp.torch/Tensor, class TorchSharp.torch/Tensor&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.TorchSharp.Loss.FocalLoss" />
  <TypeSignature Language="VB.NET" Value="Public Class FocalLoss&#xA;Inherits torch.nn.Module(Of torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor)" />
  <TypeSignature Language="F#" Value="type FocalLoss = class&#xA;    inherit torch.nn.Module&lt;torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TorchSharp.torch+nn+Module&lt;TorchSharp.torch+Tensor,TorchSharp.torch+Tensor,TorchSharp.torch+Tensor,TorchSharp.torch+Tensor,TorchSharp.torch+Tensor&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">TorchSharp.torch+Tensor</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">TorchSharp.torch+Tensor</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!2">TorchSharp.torch+Tensor</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!3">TorchSharp.torch+Tensor</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!4">TorchSharp.torch+Tensor</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A kind of loss function to balance easy and hard samples.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FocalLoss (double alpha = 0.25, double gamma = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 alpha, float64 gamma) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TorchSharp.Loss.FocalLoss.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional alpha As Double = 0.25, Optional gamma As Double = 2)" />
      <MemberSignature Language="F#" Value="new Microsoft.ML.TorchSharp.Loss.FocalLoss : double * double -&gt; Microsoft.ML.TorchSharp.Loss.FocalLoss" Usage="new Microsoft.ML.TorchSharp.Loss.FocalLoss (alpha, gamma)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alpha" Type="System.Double" />
        <Parameter Name="gamma" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="alpha">The alpha.</param>
        <param name="gamma">The gamma.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.TorchSharp.Loss.FocalLoss" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="forward">
      <MemberSignature Language="C#" Value="public override TorchSharp.torch.Tensor forward (TorchSharp.torch.Tensor classifications, TorchSharp.torch.Tensor regressions, TorchSharp.torch.Tensor anchors, TorchSharp.torch.Tensor annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class TorchSharp.torch/Tensor forward(class TorchSharp.torch/Tensor classifications, class TorchSharp.torch/Tensor regressions, class TorchSharp.torch/Tensor anchors, class TorchSharp.torch/Tensor annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.TorchSharp.Loss.FocalLoss.forward(TorchSharp.torch.Tensor,TorchSharp.torch.Tensor,TorchSharp.torch.Tensor,TorchSharp.torch.Tensor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function forward (classifications As torch.Tensor, regressions As torch.Tensor, anchors As torch.Tensor, annotations As torch.Tensor) As torch.Tensor" />
      <MemberSignature Language="F#" Value="override this.forward : TorchSharp.torch.Tensor * TorchSharp.torch.Tensor * TorchSharp.torch.Tensor * TorchSharp.torch.Tensor -&gt; TorchSharp.torch.Tensor" Usage="focalLoss.forward (classifications, regressions, anchors, annotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TorchSharp</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.torch+Tensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classifications" Type="TorchSharp.torch+Tensor" />
        <Parameter Name="regressions" Type="TorchSharp.torch+Tensor" />
        <Parameter Name="anchors" Type="TorchSharp.torch+Tensor" />
        <Parameter Name="annotations" Type="TorchSharp.torch+Tensor" />
      </Parameters>
      <Docs>
        <param name="classifications">To be added.</param>
        <param name="regressions">To be added.</param>
        <param name="anchors">To be added.</param>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
